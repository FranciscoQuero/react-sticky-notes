(window.webpackJsonp=window.webpackJsonp||[]).push([[1],[,,function(e,t,n){var o=n(3);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(5)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(4)(!1)).push([e.i,"@keyframes shadowanim {\n  0% {\n    box-shadow: 0px 0px 0px 25px inset rgba(0, 0, 0, 0.15), 0px 0px 0px 15px inset rgba(0, 0, 0, 0.15), 0px 0px 0px 5px inset rgba(0, 0, 0, 0.15);\n    opacity: 0.2; }\n  20% {\n    opacity: 0.9; }\n  50% {\n    opacity: 1; }\n  70% {\n    opacity: 0.9; }\n  100% {\n    box-shadow: 0px 0px 0px 0px inset rgba(0, 0, 0, 0.15);\n    opacity: 0.2; } }\n\n.s-notes {\n  background-color: #282c34;\n  color: #ffffff;\n  overflow: hidden; }\n  .s-notes *, .s-notes *::before, .s-notes *::after {\n    box-sizing: border-box; }\n  .s-notes--note {\n    position: absolute;\n    left: 0;\n    top: 0;\n    box-shadow: 1px 1px 2px rgba(0, 0, 0, 0.15);\n    background-color: #bfaa40; }\n    .s-notes--note__selected {\n      box-shadow: 1px 1px 2px rgba(0, 0, 0, 0.25); }\n    .s-notes--note__body {\n      display: flex;\n      min-width: 200px; }\n  .s-notes--navbar {\n    position: absolute;\n    bottom: 0;\n    right: 0;\n    white-space: nowrap;\n    overflow: auto;\n    max-width: 100%; }\n    .s-notes--navbar__item {\n      display: inline-block;\n      position: relative;\n      vertical-align: middle;\n      opacity: .8;\n      padding-right: 32px; }\n      .s-notes--navbar__item--select, .s-notes--navbar__item--delete {\n        cursor: pointer;\n        border: none;\n        outline: none;\n        color: #fff; }\n      .s-notes--navbar__item--select {\n        width: 80px;\n        height: 22px;\n        padding: 0px 5px;\n        white-space: nowrap;\n        background: none;\n        text-overflow: ellipsis;\n        overflow: hidden;\n        font-size: 12px; }\n      .s-notes--navbar__item--delete {\n        position: absolute;\n        right: 2px;\n        top: 2px;\n        padding: 0;\n        width: 18px;\n        height: 18px;\n        border-radius: 50%;\n        background-color: rgba(0, 0, 0, 0.25); }\n        .s-notes--navbar__item--delete:hover, .s-notes--navbar__item--delete:focus {\n          background-color: rgba(0, 0, 0, 0.5); }\n      .s-notes--navbar__item--add {\n        width: 18px;\n        height: 18px;\n        opacity: 0.8;\n        cursor: pointer;\n        border: none;\n        background: #333;\n        color: #fff;\n        padding: 0;\n        vertical-align: middle; }\n        .s-notes--navbar__item--add:hover, .s-notes--navbar__item--add:focus {\n          opacity: 1; }\n      .s-notes--navbar__item:hover, .s-notes--navbar__item:focus {\n        opacity: 1; }\n  .s-notes--header {\n    display: flex;\n    background-color: rgba(0, 0, 0, 0.25);\n    border-bottom: 1px solid rgba(0, 0, 0, 0.25);\n    opacity: 0;\n    transition: all .3s linear; }\n    .s-notes--header__selected {\n      opacity: 1; }\n    .s-notes--header svg {\n      line-height: 1;\n      vertical-align: middle; }\n    .s-notes--header__button--title {\n      flex-grow: 1;\n      line-height: 30px;\n      text-align: left;\n      user-select: none; }\n    .s-notes--header__button--title, .s-notes--header__button--add, .s-notes--header__button--menu, .s-notes--header__button--trash {\n      line-height: 30px;\n      background: none;\n      border: none;\n      cursor: pointer;\n      transition: all .2s linear;\n      padding: 5px;\n      color: rgba(255, 255, 255, 0.75);\n      outline: none; }\n      .s-notes--header__button--title:hover, .s-notes--header__button--title:focus, .s-notes--header__button--add:hover, .s-notes--header__button--add:focus, .s-notes--header__button--menu:hover, .s-notes--header__button--menu:focus, .s-notes--header__button--trash:hover, .s-notes--header__button--trash:focus {\n        background-color: rgba(0, 0, 0, 0.25);\n        outline: none; }\n      .s-notes--header__button--title:disabled, .s-notes--header__button--add:disabled, .s-notes--header__button--menu:disabled, .s-notes--header__button--trash:disabled {\n        cursor: not-allowed; }\n    .s-notes--header__button--add, .s-notes--header__button--menu, .s-notes--header__button--trash {\n      width: 32px; }\n  .s-notes--text {\n    padding: 10px;\n    font-size: 12px;\n    width: 100%; }\n    .s-notes--text:empty::before {\n      color: rgba(255, 255, 255, 0.75);\n      content: 'Add your notes...'; }\n  .s-notes--colors {\n    flex-grow: 1; }\n    .s-notes--colors__color {\n      text-indent: -99999px;\n      cursor: pointer;\n      margin: 1px;\n      width: 3.6em;\n      height: 3.6em;\n      border-radius: 50%;\n      border: none;\n      outline: none;\n      transition: all 0.4s linear;\n      box-shadow: 0px 0px 0px 5px inset rgba(0, 0, 0, 0.15); }\n      .s-notes--colors__color:hover, .s-notes--colors__color:focus {\n        box-shadow: 0px 0px 0px 10px inset rgba(0, 0, 0, 0.15); }\n      .s-notes--colors__color--selected {\n        animation-name: shadowanim;\n        animation-duration: 2s;\n        animation-iteration-count: 100;\n        opacity: .75; }\n",""])},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",o=e[3];if(!o)return n;if(t&&"function"==typeof btoa){var r=function(e){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(e))))+" */"}(o),i=o.sources.map(function(e){return"/*# sourceURL="+o.sourceRoot+e+" */"});return[n].concat(i).concat([r]).join("\n")}return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var o={},r=0;r<this.length;r++){var i=this[r][0];"number"==typeof i&&(o[i]=!0)}for(r=0;r<e.length;r++){var a=e[r];"number"==typeof a[0]&&o[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(e,t,n){var o={},r=function(e){var t;return function(){return void 0===t&&(t=e.apply(this,arguments)),t}}(function(){return window&&document&&document.all&&!window.atob}),i=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var o=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,n);if(window.HTMLIFrameElement&&o instanceof window.HTMLIFrameElement)try{o=o.contentDocument.head}catch(e){o=null}t[e]=o}return t[e]}}(),a=null,s=0,c=[],u=n(6);function l(e,t){for(var n=0;n<e.length;n++){var r=e[n],i=o[r.id];if(i){i.refs++;for(var a=0;a<i.parts.length;a++)i.parts[a](r.parts[a]);for(;a<r.parts.length;a++)i.parts.push(m(r.parts[a],t))}else{var s=[];for(a=0;a<r.parts.length;a++)s.push(m(r.parts[a],t));o[r.id]={id:r.id,refs:1,parts:s}}}}function f(e,t){for(var n=[],o={},r=0;r<e.length;r++){var i=e[r],a=t.base?i[0]+t.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};o[a]?o[a].parts.push(s):n.push(o[a]={id:a,parts:[s]})}return n}function p(e,t){var n=i(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var o=c[c.length-1];if("top"===e.insertAt)o?o.nextSibling?n.insertBefore(t,o.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),c.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var r=i(e.insertAt.before,n);n.insertBefore(t,r)}}function d(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=c.indexOf(e);t>=0&&c.splice(t,1)}function b(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var o=function(){0;return n.nc}();o&&(e.attrs.nonce=o)}return h(t,e.attrs),p(e,t),t}function h(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function m(e,t){var n,o,r,i;if(t.transform&&e.css){if(!(i=t.transform(e.css)))return function(){};e.css=i}if(t.singleton){var c=s++;n=a||(a=b(t)),o=v.bind(null,n,c,!1),r=v.bind(null,n,c,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",h(t,e.attrs),p(e,t),t}(t),o=function(e,t,n){var o=n.css,r=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&r;(t.convertToAbsoluteUrls||i)&&(o=u(o));r&&(o+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var a=new Blob([o],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,n,t),r=function(){d(n),n.href&&URL.revokeObjectURL(n.href)}):(n=b(t),o=function(e,t){var n=t.css,o=t.media;o&&e.setAttribute("media",o);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),r=function(){d(n)});return o(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;o(e=t)}else r()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=r()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=f(e,t);return l(n,t),function(e){for(var r=[],i=0;i<n.length;i++){var a=n[i];(s=o[a.id]).refs--,r.push(s)}e&&l(f(e,t),t);for(i=0;i<r.length;i++){var s;if(0===(s=r[i]).refs){for(var c=0;c<s.parts.length;c++)s.parts[c]();delete o[s.id]}}}};var y=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}();function v(e,t,n,o){var r=n?"":o.css;if(e.styleSheet)e.styleSheet.cssText=y(t,r);else{var i=document.createTextNode(r),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,o=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var r,i=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(r=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:o+i.replace(/^\.\//,""),"url("+JSON.stringify(r)+")")})}},function(e,t,n){"use strict";n.r(t);var o=n(1),r=n.n(o),i=n(0);var a=function(e){var t=e.index,n=e.prefix,o=e.selected,r=e.addItem,a=e.deleteItem,s=e.setToggle,c=e.position,u=e.title,l=e.targetRef,f=e.icons;return Object(i.d)("div",{className:"".concat(n,"--header ").concat(o?n+"--header__selected":""),style:Object(i.b)("note-header",{selected:o})},[Object(i.d)("button",{key:"note-header-button-1",className:"".concat(n,"--header__button--add"),onClick:function(){return r({index:t,position:c,selected:!0})}},f.add),Object(i.d)("button",{key:"note-header-button-2",className:"".concat(n,"--header__button--title"),ref:l},u||"..."),Object(i.d)("button",{key:"note-header-button-3",className:"".concat(n,"--header__button--menu"),onClick:function(){return s(t+1)}},f.menu),Object(i.d)("button",{key:"note-header-button-4",className:"".concat(n,"--header__button--trash"),onClick:function(){return a(t)}},f.trash)])};var s=function(e){var t=e.index,n=e.prefix,o=e.text,r=e.updateItem;return Object(i.d)("div",{className:"".concat(n,"--text"),placeholder:"react-hooks",contentEditable:"true",onBlur:function(e){return r(t,{title:String(e.target.innerText).substr(0,10),text:e.target.innerText})},dangerouslySetInnerHTML:{__html:Object(i.h)(o)},style:Object(i.b)("note-input")})};var c=function(e){var t=e.index,n=e.prefix,o=e.color,r=e.colorCodes,a=e.setColor;return Object(i.d)("div",{className:"".concat(n,"--colors"),style:Object(i.b)("note-menu")},r.map(function(e){return Object(i.d)("button",{key:e,onClick:function(){return a(t,e)},className:"".concat(n,"--colors__color ").concat(o===e?n+"--colors__color--selected":""),style:Object(i.b)("note-color-selector",{colorCode:e})},e)}))};function u(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var f=function(){function e(){var t=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),l(this,"initialX",0),l(this,"initialY",0),l(this,"currentX",0),l(this,"currentY",0),l(this,"onMouseMove",function(e){e.preventDefault();var n=t.options.element,o=t.getPosition(e,t.initialX,t.initialY);t.currentX=o.x,t.currentY=o.y;var r=t.options.element.parentElement.offsetWidth-t.options.element.offsetWidth,i=t.options.element.parentElement.offsetHeight-t.options.element.offsetHeight;t.currentX<0&&(t.currentX=0),t.currentY<0&&(t.currentY=0),t.currentX>r&&(t.currentX=r),t.currentY>i&&(t.currentY=i,n.parentElement.offsetHeight<n.offsetHeight&&(t.currentY=0)),t.setTranslate(t.currentX,t.currentY)}),l(this,"onMouseDown",function(e){var n=t.options.element.getBoundingClientRect(),o=t.getPosition(e,n.x,n.y);t.initialX=o.x,t.initialY=o.y,document.addEventListener("mousemove",t.onMouseMove,null),document.addEventListener("mouseup",t.onMouseUp,null)}),l(this,"onMouseUp",function(e){t.options.onDragComplete&&t.options.onDragComplete.call(t,{x:t.currentX,y:t.currentY}),document.removeEventListener("mousemove",t.onMouseMove),document.removeEventListener("mouseup",t.onMouseUp,null)})}return function(e,t,n){t&&u(e.prototype,t),n&&u(e,n)}(e,[{key:"init",value:function(e){this.options=e}},{key:"setTranslate",value:function(e,t){this.options.element&&(this.options.element.style.transform="translate3d(".concat(e,"px,").concat(t,"px,0)"))}},{key:"getPosition",value:function(e,t,n){return/touch/.test(e.type)?{x:e.touches[0].clientX-t,y:e.touches[0].clientY-n}:{x:e.clientX-t,y:e.clientY-n}}}]),e}();function p(e){return(p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function d(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function b(e){return(b=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function h(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function m(e,t){return(m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function y(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var v=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),y(h(n=function(e,t){return!t||"object"!==p(t)&&"function"!=typeof t?h(e):t}(this,b(t).call(this,e))),"draggable",null),y(h(n),"onMouseDown",function(e){n.state.active&&e.target===n.props.target.current&&n.draggable.onMouseDown(e)}),y(h(n),"onClick",function(e){n.setState({active:!0},function(){n.props.onSelect(n.state.active)})}),n.state={active:e.selected,options:{}},n.element=r.a.createRef(),n.draggable=new f,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}(t,r.a.Component),function(e,t,n){t&&d(e.prototype,t),n&&d(e,n)}(t,[{key:"componentDidMount",value:function(){var e=this,t={element:this.element?this.element.current:null,position:this.props.position,onDragComplete:this.props.onDragComplete,onInit:this.props.onInit};this.setState({options:t},function(){e.draggable.init(t)})}},{key:"render",value:function(){return Object(i.d)("div",{className:this.props.className,style:this.props.style,ref:this.element,onClick:this.onClick,onMouseDown:this.onMouseDown},this.props.children)}}]),t}();function g(e){return(g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function x(e,t){return!t||"object"!==g(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function w(e){return(w=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function O(e,t){return(O=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var j=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=x(this,w(t).call(this,e))).targetRef=r.a.createRef(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&O(e,t)}(t,r.a.Component),function(e,t,n){t&&_(e.prototype,t),n&&_(e,n)}(t,[{key:"render",value:function(){var e=this.props,t=e.index,n=e.selected,o=(e.width,e.height,e.containerHeight,e.toggle),r=e.setToggle,u=e.prefix,l=e.title,f=e.text,p=e.color,d=e.setColor,b=e.addItem,h=e.updateItem,m=e.selectItem,y=e.deleteItem,g=e.colorCodes,_=e.position,x=e.icons;return Object(i.d)(v,{className:"".concat(u,"--note ").concat(n?u+"--note__selected":""),position:_,selected:n,target:this.targetRef,onDragComplete:function(e){return h(t,{position:e})},onInit:function(e){return h(t,e)},onSelect:function(e){return m(t,{selected:e})},style:Object(i.b)("note",this.props)},[Object(i.d)(a,{key:"note-header",targetRef:this.targetRef,index:t,prefix:u,selected:n,icons:x,addItem:b,deleteItem:y,setToggle:r,position:_,title:l}),Object(i.d)("div",{key:"note-body",className:"".concat(u,"--note__body"),style:Object(i.b)("note-body",this.props)},o===t+1&&n&&g?Object(i.d)(c,function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}({key:"note-menu",colorCodes:g,updateItem:h,index:t,prefix:u,color:p,setColor:d},"colorCodes",g)):Object(i.d)(s,{key:"note-text",index:t,prefix:u,text:f,updateItem:h}))])}}]),t}();var k=function(e){var t=e.prefix,n=(e.icons,e.index),o=e.color,r=e.text,a=e.selectItem,s=e.deleteItem;return Object(i.d)("span",{className:"".concat(t,"--navbar__item"),style:{backgroundColor:o}},[Object(i.d)("button",{key:"navbar-item__".concat(n,"--select"),className:"".concat(t,"--navbar__item--select"),type:"button",onClick:function(){return a(n,{selected:!0})}},r||"..."),Object(i.d)("button",{key:"navbar-item__".concat(n,"--delete"),type:"button",className:"".concat(t,"--navbar__item--delete"),onClick:function(){return s(n,{selected:!0})}},"x")])};var C=function(e){var t=e.prefix,n=e.icons,o=e.addItem;return Object(i.d)("button",{key:"".concat(t,"--navbar__item--add"),type:"button",className:"".concat(t,"--navbar__item--add"),onClick:function(){return o()}},n.add)};var I=function(e){var t=e.prefix,n=e.items,o=e.addItem,r=e.selectItem,a=e.deleteItem,s=e.icons,c=e.displayFooter;return Object(i.d)("div",{className:"".concat(t,"--navbar")},[c&&n?n.map(function(e,n){return Object(i.d)(k,{key:"navbar-item__".concat(n),index:n,prefix:t,icons:s,text:e.text,color:e.color,selectItem:r,deleteItem:a},e.text)}):null,Object(i.d)(C,{key:"navbar-item__add",prefix:t,icons:s,addItem:o})])};function S(e){return(S="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function E(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function R(e){return(R=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function T(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function M(e,t){return(M=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function N(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var P=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),N(T(n=function(e,t){return!t||"object"!==S(t)&&"function"!=typeof t?T(e):t}(this,R(t).call(this,e))),"setToggle",function(e){n.setState({toggle:n.state.toggle!==e&&e})}),N(T(n),"setColor",function(e,t){n.setToggle(!1),n.props.updateItem(e,{color:t})}),n.state={toggle:!1,containerWidth:0,containerHeight:0},n.notesContainer=r.a.createRef(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&M(e,t)}(t,r.a.Component),function(e,t,n){t&&E(e.prototype,t),n&&E(e,n)}(t,[{key:"componentDidMount",value:function(){this.notesContainer&&this.notesContainer.current&&this.setState({containerWidth:this.notesContainer.current.offsetWidth,containerHeight:this.notesContainer.current.offsetHeight})}},{key:"render",value:function(){var e=this,t=this.props,n=t.prefix,o=t.addItem,r=t.updateItem,a=t.selectItem,s=t.deleteItem,c=t.colorCodes,u=(t.containerWidth,t.containerHeight,t.width),l=t.height,f=(t.backgroundColor,t.icons),p=t.items,d=t.displayFooter;return Object(i.d)("div",{key:n,className:n,ref:this.notesContainer,style:Object(i.b)("container",this.props)},[p?p.map(function(t,d){return Object(i.d)(j,function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},o=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),o.forEach(function(t){N(e,t,n[t])})}return e}({},t,e.state,{count:p.length,key:d,prefix:n,index:d,icons:f,width:u,height:l,addItem:o,updateItem:r,selectItem:a,deleteItem:s,colorCodes:c,toggle:e.state.toggle,setToggle:e.setToggle,setColor:e.setColor}),null)}):null,Object(i.d)(I,{key:"".concat(n,"--navbar"),displayFooter:d,prefix:n,icons:f,items:p,addItem:o,selectItem:a,deleteItem:s})])}}]),t}();t.default=P},,function(e,t,n){"use strict";n.r(t);var o=n(7);n(2);t.default=o.default}]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,