(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{8:function(e,t,n){"use strict";n.r(t);var o=n(1),r=n.n(o),i=n(0);var c=function(e){var t=e.index,n=e.prefix,o=e.selected,r=e.addItem,c=e.deleteItem,a=e.setToggle,u=e.position,s=e.title,l=e.targetRef,f=e.icons;return Object(i.d)("div",{className:"".concat(n,"--header ").concat(o?n+"--header__selected":""),style:Object(i.b)("note-header",{selected:o})},[Object(i.d)("button",{key:"note-header-button-1",className:"".concat(n,"--header__button--add"),onClick:function(){return r({index:t,position:u,selected:!0})}},f.add),Object(i.d)("button",{key:"note-header-button-2",className:"".concat(n,"--header__button--title"),ref:l},s||"..."),Object(i.d)("button",{key:"note-header-button-3",className:"".concat(n,"--header__button--menu"),onClick:function(){return a(t+1)}},f.menu),Object(i.d)("button",{key:"note-header-button-4",className:"".concat(n,"--header__button--trash"),onClick:function(){return c(t)}},f.trash)])};var a=function(e){var t=e.index,n=e.prefix,o=e.text,r=e.updateItem;return Object(i.d)("div",{className:"".concat(n,"--text"),placeholder:"react-hooks",contentEditable:"true",onBlur:function(e){return r(t,{title:String(e.target.innerText).substr(0,10),text:e.target.innerText})},dangerouslySetInnerHTML:{__html:Object(i.h)(o)},style:Object(i.b)("note-input")})};var u=function(e){var t=e.index,n=e.prefix,o=e.color,r=e.colorCodes,c=e.setColor;return Object(i.d)("div",{className:"".concat(n,"--colors"),style:Object(i.b)("note-menu")},r.map(function(e){return Object(i.d)("button",{key:e,onClick:function(){return c(t,e)},className:"".concat(n,"--colors__color ").concat(o===e?n+"--colors__color--selected":""),style:Object(i.b)("note-color-selector",{colorCode:e})},e)}))};function s(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var f=function(){function e(){var t=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),l(this,"initialX",0),l(this,"initialY",0),l(this,"currentX",0),l(this,"currentY",0),l(this,"onMouseMove",function(e){e.preventDefault();var n=t.options.element,o=t.getPosition(e,t.initialX,t.initialY);t.currentX=o.x,t.currentY=o.y;var r=t.options.element.parentElement.offsetWidth-t.options.element.offsetWidth,i=t.options.element.parentElement.offsetHeight-t.options.element.offsetHeight;t.currentX<0&&(t.currentX=0),t.currentY<0&&(t.currentY=0),t.currentX>r&&(t.currentX=r),t.currentY>i&&(t.currentY=i,n.parentElement.offsetHeight<n.offsetHeight&&(t.currentY=0)),t.setTranslate(t.currentX,t.currentY)}),l(this,"onMouseDown",function(e){var n=t.options.element.getBoundingClientRect(),o=t.getPosition(e,n.x,n.y);t.initialX=o.x,t.initialY=o.y,document.addEventListener("mousemove",t.onMouseMove,null),document.addEventListener("mouseup",t.onMouseUp,null)}),l(this,"onMouseUp",function(e){t.options.onDragComplete&&t.options.onDragComplete.call(t,{x:t.currentX,y:t.currentY}),document.removeEventListener("mousemove",t.onMouseMove),document.removeEventListener("mouseup",t.onMouseUp,null)})}return function(e,t,n){t&&s(e.prototype,t),n&&s(e,n)}(e,[{key:"init",value:function(e){this.options=e}},{key:"setTranslate",value:function(e,t){this.options.element&&(this.options.element.style.transform="translate3d(".concat(e,"px,").concat(t,"px,0)"))}},{key:"getPosition",value:function(e,t,n){return/touch/.test(e.type)?{x:e.touches[0].clientX-t,y:e.touches[0].clientY-n}:{x:e.clientX-t,y:e.clientY-n}}}]),e}();function p(e){return(p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function d(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function b(e){return(b=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function m(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function y(e,t){return(y=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function h(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var g=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),h(m(n=function(e,t){return!t||"object"!==p(t)&&"function"!=typeof t?m(e):t}(this,b(t).call(this,e))),"draggable",null),h(m(n),"onMouseDown",function(e){n.state.active&&e.target===n.props.target.current&&n.draggable.onMouseDown(e)}),h(m(n),"onClick",function(e){n.setState({active:!0},function(){n.props.onSelect(n.state.active)})}),n.state={active:e.selected,options:{}},n.element=r.a.createRef(),n.draggable=new f,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&y(e,t)}(t,r.a.Component),function(e,t,n){t&&d(e.prototype,t),n&&d(e,n)}(t,[{key:"componentDidMount",value:function(){var e=this,t={element:this.element?this.element.current:null,position:this.props.position,onDragComplete:this.props.onDragComplete,onInit:this.props.onInit};this.setState({options:t},function(){e.draggable.init(t)})}},{key:"render",value:function(){return Object(i.d)("div",{className:this.props.className,style:this.props.style,ref:this.element,onClick:this.onClick,onMouseDown:this.onMouseDown},this.props.children)}}]),t}();function v(e){return(v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function O(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function j(e,t){return!t||"object"!==v(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function _(e){return(_=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function x(e,t){return(x=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var w=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=j(this,_(t).call(this,e))).targetRef=r.a.createRef(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&x(e,t)}(t,r.a.Component),function(e,t,n){t&&O(e.prototype,t),n&&O(e,n)}(t,[{key:"render",value:function(){var e=this.props,t=e.index,n=e.selected,o=(e.width,e.height,e.containerHeight,e.toggle),r=e.setToggle,s=e.prefix,l=e.title,f=e.text,p=e.color,d=e.setColor,b=e.addItem,m=e.updateItem,y=e.selectItem,h=e.deleteItem,v=e.colorCodes,O=e.position,j=e.icons;return Object(i.d)(g,{className:"".concat(s,"--note ").concat(n?s+"--note__selected":""),position:O,selected:n,target:this.targetRef,onDragComplete:function(e){return m(t,{position:e})},onInit:function(e){return m(t,e)},onSelect:function(e){return y(t,{selected:e})},style:Object(i.b)("note",this.props)},[Object(i.d)(c,{key:"note-header",targetRef:this.targetRef,index:t,prefix:s,selected:n,icons:j,addItem:b,deleteItem:h,setToggle:r,position:O,title:l}),Object(i.d)("div",{key:"note-body",className:"".concat(s,"--note__body"),style:Object(i.b)("note-body",this.props)},o===t+1&&n&&v?Object(i.d)(u,function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}({key:"note-menu",colorCodes:v,updateItem:m,index:t,prefix:s,color:p,setColor:d},"colorCodes",v)):Object(i.d)(a,{key:"note-text",index:t,prefix:s,text:f,updateItem:m}))])}}]),t}();var k=function(e){var t=e.prefix,n=(e.icons,e.index),o=e.color,r=e.text,c=e.selectItem,a=e.deleteItem;return Object(i.d)("span",{className:"".concat(t,"--navbar__item"),style:{backgroundColor:o}},[Object(i.d)("button",{key:"navbar-item__".concat(n,"--select"),className:"".concat(t,"--navbar__item--select"),type:"button",onClick:function(){return c(n,{selected:!0})}},r||"..."),Object(i.d)("button",{key:"navbar-item__".concat(n,"--delete"),type:"button",className:"".concat(t,"--navbar__item--delete"),onClick:function(){return a(n,{selected:!0})}},"x")])};var C=function(e){var t=e.prefix,n=e.icons,o=e.addItem;return Object(i.d)("button",{key:"".concat(t,"--navbar__item--add"),type:"button",className:"".concat(t,"--navbar__item--add"),onClick:function(){return o()}},n.add)};var I=function(e){var t=e.prefix,n=e.items,o=e.addItem,r=e.selectItem,c=e.deleteItem,a=e.icons,u=e.displayFooter;return Object(i.d)("div",{className:"".concat(t,"--navbar")},[u&&n?n.map(function(e,n){return Object(i.d)(k,{key:"navbar-item__".concat(n),index:n,prefix:t,icons:a,text:e.text,color:e.color,selectItem:r,deleteItem:c},e.text)}):null,Object(i.d)(C,{key:"navbar-item__add",prefix:t,icons:a,addItem:o})])};function S(e){return(S="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function P(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function E(e){return(E=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function T(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function N(e,t){return(N=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function M(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var D=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),M(T(n=function(e,t){return!t||"object"!==S(t)&&"function"!=typeof t?T(e):t}(this,E(t).call(this,e))),"setToggle",function(e){n.setState({toggle:n.state.toggle!==e&&e})}),M(T(n),"setColor",function(e,t){n.setToggle(!1),n.props.updateItem(e,{color:t})}),n.state={toggle:!1,containerWidth:0,containerHeight:0},n.notesContainer=r.a.createRef(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&N(e,t)}(t,r.a.Component),function(e,t,n){t&&P(e.prototype,t),n&&P(e,n)}(t,[{key:"componentDidMount",value:function(){this.notesContainer&&this.notesContainer.current&&this.setState({containerWidth:this.notesContainer.current.offsetWidth,containerHeight:this.notesContainer.current.offsetHeight})}},{key:"render",value:function(){var e=this,t=this.props,n=t.prefix,o=t.addItem,r=t.updateItem,c=t.selectItem,a=t.deleteItem,u=t.colorCodes,s=(t.containerWidth,t.containerHeight,t.width),l=t.height,f=(t.backgroundColor,t.icons),p=t.items,d=t.displayFooter;return Object(i.d)("div",{key:n,className:n,ref:this.notesContainer,style:Object(i.b)("container",this.props)},[p?p.map(function(t,d){return Object(i.d)(w,function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},o=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),o.forEach(function(t){M(e,t,n[t])})}return e}({},t,e.state,{count:p.length,key:d,prefix:n,index:d,icons:f,width:s,height:l,addItem:o,updateItem:r,selectItem:c,deleteItem:a,colorCodes:u,toggle:e.state.toggle,setToggle:e.setToggle,setColor:e.setColor}),null)}):null,Object(i.d)(I,{key:"".concat(n,"--navbar"),displayFooter:d,prefix:n,icons:f,items:p,addItem:o,selectItem:c,deleteItem:a})])}}]),t}();t.default=D}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,