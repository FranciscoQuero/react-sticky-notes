module.exports=function(e){function t(t){for(var n,r,i=t[0],c=t[1],a=0,s=[];a<i.length;a++)r=i[a],o[r]&&s.push(o[r][0]),o[r]=0;for(n in c)Object.prototype.hasOwnProperty.call(c,n)&&(e[n]=c[n]);for(u&&u(t);s.length;)s.shift()()}var n={},o={0:0};function r(t){if(n[t])return n[t].exports;var o=n[t]={i:t,l:!1,exports:{}};return e[t].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.e=function(e){var t=[],n=o[e];if(0!==n)if(n)t.push(n[2]);else{var i=new Promise(function(t,r){n=o[e]=[t,r]});t.push(n[2]=i);var c,a=document.getElementsByTagName("head")[0],u=document.createElement("script");u.charset="utf-8",u.timeout=120,r.nc&&u.setAttribute("nonce",r.nc),u.src=function(e){return r.p+""+e+".index.js"}(e),c=function(t){u.onerror=u.onload=null,clearTimeout(s);var n=o[e];if(0!==n){if(n){var r=t&&("load"===t.type?"missing":t.type),i=t&&t.target&&t.target.src,c=new Error("Loading chunk "+e+" failed.\n("+r+": "+i+")");c.type=r,c.request=i,n[1](c)}o[e]=void 0}};var s=setTimeout(function(){c({type:"timeout",target:u})},12e4);u.onerror=u.onload=c,a.appendChild(u)}return Promise.all(t)},r.m=e,r.c=n,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="/dist/",r.oe=function(e){throw console.error(e),e};var i=window.webpackJsonp=window.webpackJsonp||[],c=i.push.bind(i);i.push=t,i=i.slice();for(var a=0;a<i.length;a++)t(i[a]);var u=c;return r(r.s=8)}({0:function(e,t,n){"use strict";var o=n(1),r=n.n(o).a.createElement,i=function(){for(var e=[],t=0;t<360;t+=18)e.push("hsl(".concat(t,",50%, 50%)"));return e}(),c=function(e){return e?e.replace(/(?:\r\n|\r|\n)/g,"<br>"):""},a=function(e,t){return localStorage.getItem("react-sticky-notes")?JSON.parse(localStorage.getItem("react-sticky-notes")):t||[{text:"",position:{x:0,y:0},color:e[Math.floor(Math.random()*e.length)],selected:!0}]},u=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};switch(e){case"container":n={position:"absolute",width:t.containerWidth,height:t.containerHeight,backgroundColor:t.backgroundColor};break;case"note":n={position:"absolute",backgroundColor:t.color,zIndex:t.selected?1:0,transform:"translate3d(".concat(t.position.x,"px,").concat(t.position.y,"px,0)")};break;case"note-body":n={width:t.width,height:t.height,backgroundColor:t.toggle===t.index+1&&t.selected?"#ffffff":"",maxHeight:"".concat(t.containerHeight-t.position.y-34,"px"),resize:"both",overflow:"auto"};break;case"note-input":n={height:"100%"};break;case"note-header":n={visibility:t.selected?"visible":"hidden"};break;case"menu":n={height:"100%"};break;case"note-color-selector":n={backgroundColor:t.colorCode}}return n};n.d(t,"d",function(){return r}),n.d(t,"a",function(){return i}),n.d(t,"h",function(){return c}),n.d(t,"c",function(){return a}),n.d(t,"b",function(){return u}),n.d(t,"e",function(){return"+"}),n.d(t,"f",function(){return"•••"}),n.d(t,"g",function(){return"x"})},1:function(e,t){e.exports=require("react")},8:function(e,t,n){"use strict";n.r(t);var o=n(1);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var i=function(e,t){var n=e.items;switch(t.type){case"add":(n=n.map(function(e,t){return e.selected=!1,e})).splice(t.payload.index,0,t.payload);break;case"update":n=n.map(function(e,n){return n===t.payload.index?function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},o=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),o.forEach(function(t){r(e,t,n[t])})}return e}({},e,t.payload):e});break;case"delete":n.splice(t.payload.index,1);break;case"select":n=n.map(function(e,n){return e.selected=n===t.payload.index,e});break;default:n=e.items}return{items:n}},c=n(0);function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},o=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),o.forEach(function(t){d(e,t,n[t])})}return e}function s(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function f(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function p(e,t){return(p=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var h=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),d(f(n=function(e,t){return!t||"object"!==a(t)&&"function"!=typeof t?f(e):t}(this,l(t).call(this,e))),"dispatch",function(e){var t=e.type,o=e.payload;n.setState(i(n.state,{type:t,payload:o}),function(){n.props.sessionKey&&localStorage.setItem(n.props.sessionKey,JSON.stringify(n.state.items)),n.props.onChange&&n.props.onChange(n.state.items)})}),d(f(n),"addItem",function(e){var t={index:e?e.index+1:n.state.items.length,color:n.getColor(),text:"",selected:!0,position:{x:0,y:0}};n.dispatch({type:"add",payload:u({},t)})}),d(f(n),"updateItem",function(e,t){n.dispatch({type:"update",payload:u({index:e},t)})}),d(f(n),"selectItem",function(e,t){n.dispatch({type:"select",payload:u({index:e},t)})}),d(f(n),"deleteItem",function(e){n.dispatch({type:"delete",payload:{index:e}})}),n.state={component:null,items:Object(c.c)(e.colorCodes,e.notes)},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&p(e,t)}(t,o["Component"]),function(e,t,n){t&&s(e.prototype,t),n&&s(e,n)}(t,[{key:"componentDidMount",value:function(){var e=this;this.props.useCSS?(console.log("notes-with-style"),n.e(1).then(n.bind(null,9)).then(function(t){console.log("notes-with-style",t),e.setState({component:t.default})})):n.e(1).then(n.bind(null,7)).then(function(t){console.log("notes",t),e.setState({component:t.default})}).catch(function(e){console.log(e)})}},{key:"getColor",value:function(){return this.props.colorCodes[Math.floor(Math.random()*this.props.colorCodes.length)]}},{key:"render",value:function(){var e=this.state.items,t=this.props,n=t.width,o=t.height,r=t.containerWidth,i=t.containerHeight,a=t.backgroundColor,u=t.icons,s=t.prefix,l=t.displayFooter;return this.state.component?Object(c.d)(this.state.component,{displayFooter:l,items:e,prefix:s,width:n,height:o,containerWidth:r,containerHeight:i,backgroundColor:a,icons:u,addItem:this.addItem,updateItem:this.updateItem,selectItem:this.selectItem,deleteItem:this.deleteItem,colorCodes:c.a}):null}}]),t}();d(h,"defaultProps",{useCSS:!0,prefix:"s-notes",colorCodes:c.a,displayFooter:!0,sessionKey:"react-sticky-notes",width:220,height:220,containerWidth:"100%",containerHeight:"100%",icons:{add:c.e,menu:c.f,trash:c.g}});var y=h;t.default=y}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,